Test case 1:

- Depot: Main routing agent (receive packages from the customer)
- Vehicle: Delivery agent (notify the MRA if free, receive packages then deliver)

workflow:
    - depot receive data from UI => notify the Delivery agent (direct communication)
    - delivery generate vehicles (different agents), each has a random state, which then notify back to the depot
    - after collecting the vehicle num, start the calculating process
    - after done processing, release routes => vehicle will compete for the shortest route

not make sense:
    - generate vehicle based on user req
        => should have 2 separate pages, 1 for vehicle defining, 1 for customer req (kind of a manage page for a company)
        

Fix: 
- combine mra & Depot

- delivery agent:
    - create vehicle agents based on the number sent back by the website
    - assign routes to vehicles (several type of communication can be applied)
    - the routes are passed by the depot (which also the mra)
    - 

current problem:
- frontend: simple output, need something to demonstrate that each route belongs to a vehicle agent
    - the delivery agent will send routes and corresponding vehicles to the frontend => adjust the frontend data input format
    - time window vrp: implement later
    - some extra features:
      - have 2 separate pages, 1 for adding/removing vehicles, and the other is the old page
      - for the first request, vehicle data will be sent to the API
      - for the next requests, if the vehicle list (both free AND absent) remains unchanged => send customer coordinates only
      - the display routes will still be the same, but now with more proper vehicle information
        - each vehicle will have a name (manually set) (reason for a separate page) and its own capacity
        - each route will associate with a vehicle name (instead of index)
      - a notification box that displays real-time events (illustrate agent communication)
      - about the vehicle page:
        - displays the current status of each vehicle (free / absent)
        - status updates when checked at request time



- backend: DELIVERY AGENT sends final results to the API (not depot)
    
    WORKFLOW:
    1. API receives data from frontend -> passes to Depot agent
    2. Depot -> Delivery Agent (forwards request + customer data)
    3. Delivery Agent checks vehicle states at request time (each vehicle has internal timer changing state randomly)
    4. Delivery Agent -> Depot (reports number of FREE vehicles only)
    5. Depot calculates routes for available vehicles -> sends routes to Delivery Agent
    6. Delivery Agent assigns routes to FREE vehicle agents (each route has ID associated)
    7. Each vehicle agent notifies Delivery Agent about the route they received
    8. Delivery Agent -> API (sends final results: routes + vehicle assignments + events)

    VEHICLE AGENT LIFECYCLE:
    - Each vehicle agent has an internal timer that triggers random state changes (free <-> absent)
    - States change independently, not triggered by requests
    - At request time, Delivery Agent queries current state of all existing vehicle agents
    - Vehicle agent persistence:
      * If vehicle list (free + absent) remains unchanged from previous request:
        - Frontend sends only customer data
        - Use all existing vehicle agents (query their current states)
      * If vehicle list changes:
        - Frontend sends vehicle data (with names and capacities)
        - Vehicles NOT on the new list: TERMINATE permanently (kill agent)
        - Vehicles on list but don't exist yet: CREATE new agents
        - Existing vehicles that remain: KEEP (but check their new state)

    DATA FORMAT FROM FRONTEND:
    - Format 1 (Customer data only): 
      * Used when vehicle fleet unchanged
      * Contains: customers, depot info
    - Format 2 (Full data with vehicles):
      * Used when vehicle fleet changes (additions/removals)
      * Contains: customers, depot info, vehicle list (names, capacities)

    REAL-TIME EVENTS (Incremental Updates):
    - Events are sent to API progressively as they happen (not bundled with final result)
    - Uses concurrent programming / async operations
    - Event types:
      1. "Vehicle Agent Created: [name]"
      2. "Vehicle Agent Terminated: [name]"
      3. "Vehicle State Checked: [name] is [free/absent]"
      4. "Available Vehicles: [count] free out of [total]"
      5. "Route [ID] calculated by Depot"
      6. "Route [ID] assigned to Vehicle [name]"
      7. "Vehicle [name] confirmed Route [ID]"
      8. "All routes assigned successfully"
    - Frontend notification box displays these events in real-time
    - Events show agent communication and system workflow transparently

previous:
{
  "routes": [
    {
      "vehicle_id": 1,
      "customers": [
        {
          "id": 1,
          "x": 150,
          "y": 200,
          "demand": 5,
          "name": "C1"
        }
      ],
      "total_demand": 5,
      "total_distance": 320.5
    }
  ],
  "total_distance": 640.2
}